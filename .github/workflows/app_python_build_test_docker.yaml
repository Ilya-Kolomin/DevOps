name: Build, test, and push to Docker

on:
  push:
    paths:
      - '.github/workflows/app_python_build_test_docker.yaml'
      - 'app_python/**'
      - '!app_python/**.md'

jobs:
  build_lint_test:
    runs-on: ubuntu-latest
    steps:
        # checkout and set up python
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

        # try to use cached dependencies
      - uses: actions/cache@v1
        id: cache_pip
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

        # install dependencies in case of cache miss
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          if [ -f app_python/requirements.txt ]; then pip install -r app_python/requirements.txt; fi

        # linting
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 app_python/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 app_python/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

        # testing
      - name: Test with pytest
        run: |
          cd app_python
          touch unittest_report.txt
          python -m unittest test.py -v &> unittest_report.txt

        # upload artifact
      - name: Upload unit test results
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-report
          path: app_python/unittest_report.txt
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}


  security:
    runs-on: ubuntu-latest
    needs: build_lint_test
    steps:
        # checkout
      - uses: actions/checkout@v3

        # try use cached dependencies
      - uses: actions/cache@v1
        id: cache_pip
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

        # install dependencies in case of cache miss
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          if [ -f app_python/requirements.txt ]; then pip install -r app_python/requirements.txt; fi

        # setup and use snyk
      - uses: snyk/actions/setup@master
      - name: Snyk test for vulnerabilities
        run: | 
          cd app_python
          snyk test --sarif-file-output=snyk.sarif
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

        # upload results
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: app_python/snyk.sarif

  # build and push docker image
  build_docker:
    needs: build_lint_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: app_python
          file: app_python/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/devops_app_python:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/devops_app_python:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/devops_app_python:buildcache,mode=max
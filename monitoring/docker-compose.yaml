---
version: "3"

networks:
  loki:

volumes:
    prometheus_data: {}

services:
  prometheus:
    image: prom/prometheus:v2.36.2
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - loki
    depends_on:
      - gateway
    restart: always
    logging:
      driver: "local"
      options:
        max-size: 20m
    healthcheck:
      test: "curl -f http://localhost:9090/-/healthy"
      interval: 5s
      timeout: 5s
      retries: 20

  read:
    image: grafana/loki:2.6.1
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - "3101:3100"
      - "7946"
      - "9095"
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    networks: &loki-dns
      loki:
        aliases:
          - loki
    logging:
      driver: "local"
      options:
        max-size: 20m
    healthcheck:
      test: "curl -f http://localhost:3100/metrics"
      interval: 5s
      timeout: 5s
      retries: 20

  write:
    image: grafana/loki:2.6.1
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - "3102:3100"
      - "7946"
      - "9095"
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    networks:
      <<: *loki-dns
    logging:
      driver: "local"
      options:
        max-size: 20m
    healthcheck:
      test: "curl -f http://localhost:3100/metrics"
      interval: 5s
      timeout: 5s
      retries: 20

  promtail:
    image: grafana/promtail:2.6.1
    volumes:
      - ./promtail-local-config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - gateway
    networks:
      - loki
    logging:
      driver: "local"
      options:
        max-size: 20m
    healthcheck:
      test: "curl -f http://localhost:9080/metrics"
      interval: 5s
      timeout: 5s
      retries: 20

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ACCESS_KEY=loki
      - MINIO_SECRET_KEY=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    networks:
      - loki
    logging:
      driver: "local"
      options:
        max-size: 20m

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    ports:
      - "3000:3000"
    networks:
      - loki
    logging:
      driver: "local"
      options:
        max-size: 20m

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    networks:
      - loki
    logging:
      driver: "local"
      options:
        max-size: 20m

  app_python:
    image: ilyakolomin/devops_app_python
    ports:
      - "8000:8000"
    networks:
      - loki
    logging:
      driver: "local"
      options:
        max-size: 20m
    healthcheck:
      test: "curl -f http://localhost:8000/metrics"
      interval: 5s
      timeout: 5s
      retries: 20

  app_go:
    image: ilyakolomin/devops_app_go
    ports:
      - "8080:8080"
    networks:
      - loki
    logging:
      driver: "local"
      options:
        max-size: 20m
    healthcheck:
      test: "curl -f http://localhost:8080/metrics"
      interval: 5s
      timeout: 5s
      retries: 20